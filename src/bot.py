# src/bot.py

import logging
import asyncio

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telegram.error import BadRequest

from src.services.combined_inspector import CombinedTokenInspector
from src.config.settings import TG_BOT_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAIT_TICKER, WAIT_CHAIN = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
DEFAULT_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω", "/help"]], resize_keyboard=True
)

class ScamAnalyzerBot:
    def __init__(self):
        self.inspector = CombinedTokenInspector()
        self.logger = logging.getLogger(__name__)

    def run(self):
        app = ApplicationBuilder().token(TG_BOT_TOKEN).build()

        conv = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                MessageHandler(filters.Regex(r"^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω$"), self.start)
            ],
            states={
                WAIT_TICKER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_ticker)],
                WAIT_CHAIN: [CallbackQueryHandler(self.handle_chain_selection)],
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel),
                MessageHandler(filters.Regex(r"^–û—Ç–º–µ–Ω–∞$"), self.cancel)
            ],
            allow_reentry=True,
        )

        app.add_handler(conv)
        app.add_handler(CommandHandler("help", self.help))

        app.run_polling()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await update.message.reply_text(("""üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–∫–∞–º.\n –ù–∞–∂–º–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω" –∏–ª–∏ –≤–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏ /help."""),
            reply_markup=DEFAULT_KEYBOARD
        )
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä
        await update.message.reply_text(
            "–í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. BTC, ETH):", reply_markup=DEFAULT_KEYBOARD
        )
        return WAIT_TICKER

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(
            "üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1. –ù–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω' –∏–ª–∏ /start.\n"
            "2. –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä —Ç–æ–∫–µ–Ω–∞.\n"
            "3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã–±–µ—Ä–∏ —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
            "4. –ü–æ–ª—É—á–∏ –æ—Ç—á—ë—Ç.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ /cancel.",
            reply_markup=DEFAULT_KEYBOARD
        )

    async def handle_ticker(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        symbol = update.message.text.strip().upper()
        context.user_data['symbol'] = symbol

        await update.message.reply_text("üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑...")
        # –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if symbol.lower() in self.inspector.native_tokens:
            result = await self.inspector.inspect(symbol)
            await self._send_report(update, result)
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        try:
            platforms = await asyncio.get_running_loop().run_in_executor(
                None,
                self.inspector.fetcher.get_token_platforms,
                symbol
            )
        except Exception as e:
            self.logger.error(f"Error fetching platforms: {e}")
            result = await self.inspector.inspect(symbol)
            await self._send_report(update, result)
            return ConversationHandler.END

        if not platforms:
            result = await self.inspector.inspect(symbol)
            await self._send_report(update, result)
            return ConversationHandler.END

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äî –∞–Ω–∞–ª–∏–∑
        if len(platforms) == 1:
            chain = next(iter(platforms))
            result = await self.inspector.inspect(symbol, chain=chain)
            await self._send_report(update, result)
            return ConversationHandler.END

        # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        buttons = [InlineKeyboardButton(chain, callback_data=chain) for chain in platforms]
        keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['platforms'] = platforms
        return WAIT_CHAIN

    async def handle_chain_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        chain = query.data
        symbol = context.user_data.get('symbol')

        await query.edit_message_text(f"üîÑ –ê–Ω–∞–ª–∏–∑ {symbol} –≤ —Å–µ—Ç–∏ {chain}...")
        result = await self.inspector.inspect(symbol, chain=chain)
        await query.message.reply_text("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤:")
        await self._send_report(update, result)
        return ConversationHandler.END

    async def _send_report(self, update: Update, result: dict) -> None:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        if 'chain_id' in result:
            header = f"*{result['symbol']}* (chain: {result['chain_id']})\n\n"
        elif 'address' in result:
            header = f"*{result['symbol']}* (`{result['address']}`)\n\n"
        else:
            header = f"*{result['symbol']}*\n\n"

        text = header + result.get('llm_report', '')
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        for chunk in [text[i:i+4096] for i in range(0, len(text), 4096)]:
            try:
                await update.effective_chat.send_message(chunk, parse_mode='Markdown')
            except BadRequest:
                await update.effective_chat.send_message(chunk)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=DEFAULT_KEYBOARD)
        return ConversationHandler.END


if __name__ == '__main__':
    ScamAnalyzerBot().run()
