import asyncio
import random
from typing import Dict, List, Tuple
from ..api.coingecko import CoinGeckoAPI
from ..utils.gemini_wrapper import GeminiWrapper

class TokenAnalyzer:
    def __init__(self):
        self.coingecko = CoinGeckoAPI()
        self.gemini = GeminiWrapper()

    async def get_token_info(self, symbol: str) -> Dict:
        platforms = self.coingecko.get_token_contract_address(symbol)
        return {
            "platforms": platforms,
            "symbol": symbol,
        }

    async def analyze_token(self, token_info: Dict) -> Tuple[List[str], str]:
        symbol = token_info["symbol"]
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É—Å—Ç–∏–Ω–≥–∞
        boosting_result = random.choice(["–°–∫–∞–º", "–ù–µ —Å–∫–∞–º"])
        
        # –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        queries = [
            self._get_analysis_prompt(symbol)
        ]
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        gemini_results = await asyncio.gather(
            *[self._analyze_with_search(query) for query in queries]
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        final_analysis = await self._get_final_analysis(
            symbol, boosting_result, gemini_results
        )
        
        return gemini_results, final_analysis

    async def _analyze_with_search(self, query: str) -> str:
        return self.gemini.generate(query)

    def _get_analysis_prompt(self, symbol: str) -> str:
        return (
            f"–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–∫–µ–Ω {symbol} –∏ –¥–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ "
            f"–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
            f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏, "
            f"–ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞. –î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:"
            f"\n1) –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã"
            f"\n2) –†–∏—Å–∫–∏"
            f"\n3) –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
            f"\n4) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ"
        )

    async def _get_final_analysis(
        self, 
        symbol: str, 
        boosting_result: str, 
        analysis_results: List[str]
    ) -> str:
        prompt = (
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ {symbol}:\n\n"
            f"1. –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {boosting_result}\n"
            f"2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {analysis_results}\n\n"
            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã *, _, `, #, -, [, ], (, ) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):\n\n"
            f"üí° –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:\n"
            f"‚Ä¢ –í—ã–≤–æ–¥ 1\n"
            f"‚Ä¢ –í—ã–≤–æ–¥ 2\n\n"
            f"‚ö†Ô∏è –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê:\n"
            f"–£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n\n"
            f"üéØ –í–ï–†–î–ò–ö–¢:\n"
            f"–ß–µ—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            f"üëâ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            f"1Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1\n"
            f"2Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. "
            f"–î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ‚Ä¢ –∏–ª–∏ —ç–º–æ–¥–∑–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£). "
            f"–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        )
        return self.gemini.generate(prompt)